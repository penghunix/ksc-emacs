#+TITLE: Emacs Basic Configurations
:PROPERTIES:
#+AUTHOR: KSChoi
#+STARTUP: fold
#+PROPERTY: header-args :results silent :tangle yes
#+HTML_HEAD: <link rel="stylesheet" href="https://sandyuraz.com/styles/org.min.css">
#+SEQ_TODO: TODO(t) | DISABLED(d)
:END:

* Startup
** Early-Init
Starting in Emacs 27 the early-init.el file is run before the GUI is created, so we take care of a few misc. GUI features. Keeps ugliness down and should help startup time, too.
#+BEGIN_SRC emacs-lisp :tangle ./early-init.el
  ;; -*- lexical-binding: t; -*-

  ;; -------------------------------------------------------------------------------- ;;
  ;; This early-init.el file was auto-tangled from an orgmode file. (C) Jake B        ;;
  ;; -------------------------------------------------------------------------------- ;;

  ;; Garbage Collections
  (setq gc-cons-percentage 0.6)

  ;; Compile warnings
  ;;  (setq warning-minimum-level :emergency)
  (setq native-comp-async-report-warnings-errors 'silent) ;; native-comp warning
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))


  ;; MISC OPTIMIZATIONS ----
  ;;; optimizations (froom Doom's core.el). See that file for descriptions.
  (setq idle-update-delay 1.0)

  ;; Disabling bidi (bidirectional editing stuff)
  (setq-default bidi-display-reordering 'left-to-right 
				bidi-paragraph-direction 'left-to-right)
  (setq bidi-inhibit-bpa t)  ; emacs 27 only - disables bidirectional parenthesis

  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)
  (setq fast-but-imprecise-scrolling t)
  (setq inhibit-compacting-font-caches t)

  (menu-bar-mode 0)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Packages
#+BEGIN_SRC emacs-lisp 
  (require 'package)

  (setq package-user-dir (expand-file-name "elpa" user-emacs-directory))

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/")) ;; ELPA and NonGNU ELPA are default in Emacs28

  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3") ;; w/o this Emacs freezes when refreshing ELPA

  (package-initialize)
  (setq package-enable-at-startup nil)

  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-verbose nil)
#+END_SRC
https://jwiegley.github.io/use-package/keywords/
** Garbage Collections/Collector
#+BEGIN_SRC emacs-lisp 
  (use-package gcmh
    :diminish gcmh-mode
    :config
    (setq gcmh-idle-delay 5
          gcmh-high-cons-threshold (* 16 1024 1024))  ; 16mb
    (gcmh-mode 1))

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-percentage 0.1))) ;; Default value for `gc-cons-percentage'

  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+END_SRC

* Files, variables, etc
** Setting custom variables
#+BEGIN_SRC emacs-lisp 
  ;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Calculated variables ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; TODO: Set variables

  (defvar ksc/home (concat (getenv "HOME") "/") "My Home Dir")

#+END_SRC
** Loading custom lisp files
#+BEGIN_SRC emacs-lisp 
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  (load custom-file)
#+END_SRC
** Registers
#+BEGIN_SRC emacs-lisp 
  (setq register-preview-delay 0) ;; Show registers ASAP
  ;; (set-register ?i (cons 'file (concat org-directory   "/cpb.org")))
#+END_SRC
** Path
#+BEGIN_SRC emacs-lisp 

  ;; (if (eq jib/computer 'laptopN)
  ;;     (progn
  ;;       (setenv "PATH" "/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/jake/.pyenv/bin:/usr/local/sbin:/Users/jake/bin:/Users/jake/.doom-emacs/bin:/Library/TeX/texbin")
  ;;       ;; (setq exec-path '("/opt/homebrew/bin" "/opt/homebrew/sbin" "/usr/local/bin" "/usr/bin" "/usr/sbin" "/bin"))
  ;;       )
  ;;   (progn
  ;;     ;; (setenv "PATH" "/usr/local/Cellar/pyenv-virtualenv/1.1.5/shims:/Users/jake/.pyenv/shims:/usr/local/bin:/bin:/usr/bin:/usr/sbin:/usr/local/sbin:/sbin:/Users/jake/bin:/Users/jake/doom-emacs/bin:/Library/TeX/texbin")
  ;;     (setq exec-path '("/usr/local/Cellar/pyenv-virtualenv/1.1.5/shims"
  ;;                       "/Users/jake/.pyenv/shims" "/usr/local/bin" "/bin"
  ;;                       "/usr/bin" "/usr/sbin" "/usr/local/sbin" "/sbin"
  ;;                       "/Users/jake/bin" "/Users/jake/doom-emacs/bin"
  ;;                       "/Library/TeX/texbin"))))

  ;; (if (eq jib/computer 'laptopN)
  ;;     (setq insert-directory-program "/opt/homebrew/bin/gls")
  ;;   (setq insert-directory-program "/usr/local/bin/gls"))

  (setq browse-url-firefox-program "/Applications/Firefox.app/Contents/MacOS/firefox")
  (setq browse-url-chrome-program "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome")
#+END_SRC

* General configuration
General configurations and optimizations/better defaults.
#+BEGIN_SRC emacs-lisp 
  (server-start)

  ;; A cool mode to revert window configurations.
  (winner-mode 1)

  ;; INTERACTION -----
  (setq use-short-answers t) ;; When emacs asks for "yes" or "no", let "y" or "n" suffice
  (setq confirm-kill-emacs 'yes-or-no-p) ;; Confirm to quit
  (setq initial-major-mode 'org-mode ;; Major mode of new buffers
        initial-scratch-message ""
        initial-buffer-choice t) ;; Blank scratch buffer

  ;; WINDOW -----------
  (setq frame-resize-pixelwise t)
  (setq ns-pop-up-frames nil) ;; When opening a file (like double click) on Mac, use an existing frame
  (setq window-resize-pixelwise nil)
  (setq split-width-threshold 80) ;; How thin the window should be to stop splitting vertically (I think)

  ;; LINES -----------
  (setq-default truncate-lines t)
  (setq-default tab-width 4)
  (setq-default fill-column 80)
  (setq line-move-visual t) ;; C-p, C-n, etc uses visual lines

  (use-package paren
    ;; highlight matching delimiters
    :ensure nil
    :config
    (setq show-paren-delay 0.1
          show-paren-highlight-openparen t
          show-paren-when-point-inside-paren t
          show-paren-when-point-in-periphery t)
    (show-paren-mode 1))

  (setq sentence-end-double-space nil) ;; Sentences end with one space

  (setq bookmark-set-fringe-mark nil)

  ;; SCROLLING ---------
  (setq scroll-conservatively 101)
  (setq
   mouse-wheel-follow-mouse 't
   mouse-wheel-progressive-speed nil
   ;; The most important setting of all! Make each scroll-event move 2 lines at
   ;; a time (instead of 5 at default). Simply hold down shift to move twice as
   ;; fast, or hold down control to move 3x as fast. Perfect for trackpads.
   mouse-wheel-scroll-amount '(1 ((shift) . 3) ((control) . 6)))
  (setq mac-redisplay-dont-reset-vscroll t ;; sane trackpad/mouse scroll settings (doom)
        mac-mouse-wheel-smooth-scroll nil)

  ;; BELL/WARNING ------------
  (setq visible-bell nil) ;; Make it ring (so no visible bell) (default)
  (setq ring-bell-function 'ignore) ;; BUT ignore it, so we see and hear nothing


  ;; Uses system trash rather than deleting forever
  (setq trash-directory (concat ksc/home ".Trash"))
  (setq delete-by-moving-to-trash t)

  ;; Try really hard to keep the cursor from getting stuck in the read-only prompt
  ;; portion of the minibuffer.
  (setq minibuffer-prompt-properties '(read-only t intangible t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Explicitly define a width to reduce the cost of on-the-fly computation
  (setq-default display-line-numbers-width 3)

  ;; When opening a symlink that links to a file in a git repo, edit the file in the
  ;; git repo so we can use the Emacs vc features (like Diff) in the future
  (setq vc-follow-symlinks t)

  ;; BACKUPS/LOCKFILES --------
  ;; Don't generate backups or lockfiles.
  (setq create-lockfiles nil
        make-backup-files nil
        ;; But in case the user does enable it, some sensible defaults:
        version-control t     ; number each backup file
        backup-by-copying t   ; instead of renaming current file (clobbers links)
        delete-old-versions t ; clean up after itself
        kept-old-versions 5
        kept-new-versions 5
        backup-directory-alist (list (cons "." (concat user-emacs-directory "backup/"))))

  (use-package recentf
    :ensure nil
    :config
    (setq ;;recentf-auto-cleanup 'never
     ;; recentf-max-menu-items 0
     recentf-max-saved-items 200)
    (setq recentf-filename-handlers ;; Show home folder path as a ~
          (append '(abbreviate-file-name) recentf-filename-handlers))
    (recentf-mode))

  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  ;; ENCODING -------------
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))       ; pretty
  (prefer-coding-system 'utf-8)            ; pretty
  (setq locale-coding-system 'utf-8)       ; please

  (setq default-input-method "spanish-postfix") ;; When I need to type in Spanish (switch with C-\)

  (setq blink-cursor-interval 0.6)
  (blink-cursor-mode 0)

  (setq save-interprogram-paste-before-kill t
        apropos-do-all t
        mouse-yank-at-point t)

  (setq what-cursor-show-names t) ;; improves C-x =

  ;; Weird thing where `list-colors-display` doesn't show all colors.
  ;; https://bug-gnu-emacs.gnu.narkive.com/Bo6OdySs/bug-5683-23-1-93-list-colors-display-doesn-t-show-all-colors
  ;; (setq x-colors (ns-list-colors))

  (setq dired-kill-when-opening-new-dired-buffer t)

  (setq reb-re-syntax 'string) ;; https://www.masteringemacs.org/article/re-builder-interactive-regexp-builder
#+END_SRC

* Keyboard
** Mac Configuration/Compatibility
Use ~command~ (âŒ˜) as ~meta~ in macOS. Disable option (aka alt). Keep control ctrl. Right command turns into super (s-), and right control becomes hyper (H-). Finally, make escape quit on the first press (rather than 3, as I think it would be otherwise).

Goes to early-init so if I have an error in my init I have keybinds I am used to.
#+BEGIN_SRC emacs-lisp :tangle ./early-init.el
  ;; (setq mac-command-modifier       'meta
  ;;       mac-option-modifier         nil
  ;;       mac-control-modifier       'control
  ;;       mac-right-command-modifier 'super
  ;;       mac-right-control-modifier 'hyper)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC
** Which-key
#+BEGIN_SRC emacs-lisp 
  (use-package which-key
    :diminish which-key-mode
    :init
    (which-key-mode)
    (which-key-setup-minibuffer)
    :config
    (setq which-key-idle-delay 0.3)
    (setq which-key-prefix-prefix "â—‰ ")
    (setq which-key-sort-order 'which-key-key-order-alpha
          which-key-min-display-lines 3
          which-key-max-display-columns nil))
#+END_SRC

#+BEGIN_SRC emacs-lisp 
  (use-package general)
#+END_SRC

* Interaction, Editing, Files
** Completion
*** DISABLED Company
Company provides autosuggestion/completion in buffers (writing code, pathing to files, etc). 
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package company
	:diminish company-mode
	;; :general
	;; (general-define-key :keymaps 'company-active-map
	;;                     "C-j" 'company-select-next
	;;                     "C-k" 'company-select-previous)
	:init
	;; These configurations come from Doom Emacs:
	(add-hook 'after-init-hook 'global-company-mode)
	(setq company-minimum-prefix-length 2
		  company-tooltip-limit 14
		  company-tooltip-align-annotations t
		  company-require-match 'never
		  company-global-modes '(not erc-mode message-mode help-mode gud-mode)
		  company-frontends
		  '(company-pseudo-tooltip-frontend  ; always show candidates in overlay tooltip
			company-echo-metadata-frontend)  ; show selected candidate docs in echo area
		  company-backends '(company-capf company-files company-keywords)
		  company-auto-complete nil
		  company-auto-complete-chars nil
		  company-dabbrev-other-buffers nil
		  company-dabbrev-ignore-case nil
		  company-dabbrev-downcase nil)

	:config
	(setq company-idle-delay 0.35)
	:custom-face
	(company-tooltip ((t (:family "Roboto Mono")))))
#+END_SRC

*** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
	:diminish ivy-mode
	:config
	(setq ivy-extra-directories nil) ;; Hides . and .. directories
	(setq ivy-initial-inputs-alist nil) ;; Removes the ^ in ivy searches
	(setq-default ivy-height 10)
	(setq ivy-fixed-height-minibuffer t)
	(add-to-list 'ivy-height-alist '(counsel-M-x . 7)) ;; Don't need so many lines for M-x, I usually know what command I want

	(ivy-mode 1)

	;; Shows a preview of the face in counsel-describe-face
	(add-to-list 'ivy-format-functions-alist '(counsel-describe-face . counsel--faces-format-function))

	:general
	(general-define-key
	 ;; Also put in ivy-switch-buffer-map b/c otherwise switch buffer map overrides and C-k kills buffers
	 :keymaps '(ivy-minibuffer-map ivy-switch-buffer-map)
	 "S-SPC" 'nil
	 "C-SPC" 'ivy-restrict-to-matches ;; Default is S-SPC, changed this b/c sometimes I accidentally hit S-SPC
	 ;; C-j and C-k to move up/down in Ivy
	 "C-k" 'ivy-previous-line
	 "C-j" 'ivy-next-line)
	)

  ;; Nice icons in Ivy. Replaces all-the-icons-ivy.
  (use-package all-the-icons-ivy-rich
	:init (all-the-icons-ivy-rich-mode 1)
	:config
	(setq all-the-icons-ivy-rich-icon-size 1.0))

  (use-package ivy-rich
	:after ivy
	:init
	(setq ivy-rich-path-style 'abbrev)
	(setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
	:config
	(ivy-rich-mode 1))
#+END_SRC
*** Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :config
    (setq default-directory ksc/home)
    (setq counsel-switch-buffer-preview-virtual-buffers nil) ;; Removes recentfiles/bookmarks from counsel-switch-buffer
    (setq counsel-find-file-ignore-regexp
          (concat
           ;; That weird Icon? file in Dropbox.
           "\\(Icon\\\)"
           ;; Hides file names beginning with # or .
           "\\|\\(?:\\`[#.]\\)"))

    ;; emacs regexp notes: had to put \\| before the second regexp to make this work

    ;; Sorts counsel-recentf in order of time last accessed
    (add-to-list 'ivy-sort-functions-alist
                 '(counsel-recentf . file-newer-than-file-p))

    (add-to-list 'recentf-exclude
                 (expand-file-name "projectile-bookmarks.eld" user-emacs-directory))

    ;; Use fd
    (setq find-program "fd")
    (setq counsel-file-jump-args (split-string "-L --type f -H")) ;; follow symlinks, files, show hidden

    :general
    (general-define-key :keymaps 'counsel-find-file-map
                        "C-c f" 'counsel-file-jump-from-find) ;; when in counsel-find-file, run this to search the whole directory recursively
    )
#+END_SRC
*** Prescient
#+BEGIN_SRC emacs-lisp
  (use-package prescient
    :config
    (setq-default history-length 1000)
    (setq-default prescient-history-length 1000) ;; More prescient history
    (prescient-persist-mode +1))

  ;; Use `prescient' for Ivy menus.
  (use-package ivy-prescient
    :after ivy
    :config
    ;; don't prescient sort these commands
    (dolist (command '(org-ql-view counsel-find-file fontaine-set-preset))
      (setq ivy-prescient-sort-commands (append ivy-prescient-sort-commands (list command))))
    (ivy-prescient-mode +1))

  ;; (use-package company-prescient
  ;;   :defer 2
  ;;   :after company
  ;;   :config
  ;;   (company-prescient-mode +1))
#+END_SRC

** Smartparens
Most of this configuration is from Doom Emacs' [[https://github.com/hlissner/doom-emacs/blob/develop/core/core-editor.el][core-editor.el]]. For some reason smartparens is sort of confusing to configure (at least to me!)
#+BEGIN_SRC emacs-lisp 
  (use-package smartparens
    :diminish smartparens-mode
    :defer 1
    :config
    ;; Load default smartparens rules for various languages
    (require 'smartparens-config)
    (setq sp-max-prefix-length 25)
    (setq sp-max-pair-length 4)
    (setq sp-highlight-pair-overlay nil
          sp-highlight-wrap-overlay nil
          sp-highlight-wrap-tag-overlay nil)

    (with-eval-after-load 'evil
      (setq sp-show-pair-from-inside t)
      (setq sp-cancel-autoskip-on-backward-movement nil)
      (setq sp-pair-overlay-keymap (make-sparse-keymap)))

    (let ((unless-list '(sp-point-before-word-p
                         sp-point-after-word-p
                         sp-point-before-same-p)))
      (sp-pair "'"  nil :unless unless-list)
      (sp-pair "\"" nil :unless unless-list))

    ;; In lisps ( should open a new form if before another parenthesis
    (sp-local-pair sp-lisp-modes "(" ")" :unless '(:rem sp-point-before-same-p))

    ;; Don't do square-bracket space-expansion where it doesn't make sense to
    (sp-local-pair '(emacs-lisp-mode org-mode markdown-mode gfm-mode)
                   "[" nil :post-handlers '(:rem ("| " "SPC")))


    (dolist (brace '("(" "{" "["))
      (sp-pair brace nil
               :post-handlers '(("||\n[i]" "RET") ("| " "SPC"))
               ;; Don't autopair opening braces if before a word character or
               ;; other opening brace. The rationale: it interferes with manual
               ;; balancing of braces, and is odd form to have s-exps with no
               ;; whitespace in between, e.g. ()()(). Insert whitespace if
               ;; genuinely want to start a new form in the middle of a word.
               :unless '(sp-point-before-word-p sp-point-before-same-p)))
    (smartparens-global-mode t))
#+END_SRC
** Spellcheck (flyspell)
Enable Flyspell (spellchecking) in these modes. Requires ~aspell~ to be installed.
#+BEGIN_SRC emacs-lisp 
  ;; "Enable Flyspell mode, which highlights all misspelled words. "
  (use-package flyspell
    :defer t
    :config
    (add-to-list 'ispell-skip-region-alist '("~" "~"))
    (add-to-list 'ispell-skip-region-alist '("=" "="))
    (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC"))
    (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXPORT" . "^#\\+END_EXPORT"))
    (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXPORT" . "^#\\+END_EXPORT"))
    (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))

    (dolist (mode '(
                    ;;org-mode-hook
                    mu4e-compose-mode-hook))
      (add-hook mode (lambda () (flyspell-mode 1))))

    (setq flyspell-issue-welcome-flag nil
          flyspell-issue-message-flag nil)

    :general ;; Switches correct word from middle click to right click
    (general-define-key :keymaps 'flyspell-mouse-map
                        "<mouse-3>" #'ispell-word
                        "<mouse-2>" nil)
    (general-define-key :keymaps 'evil-motion-state-map
                        "zz" #'ispell-word)
    )

  ;; (use-package flyspell-correct
  ;;   :after flyspell
  ;;   :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

  ;; (use-package flyspell-correct-ivy
  ;;   :after flyspell-correct)
      #+END_SRC
** Evil-Anzu (search and replace)
#+BEGIN_SRC emacs-lisp 
  (use-package evil-anzu :defer t)
#+END_SRC
** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :defer t
    :config
    (setq avy-case-fold-search nil))
#+END_SRC
** Clipboard (simpleclip)
#+BEGIN_SRC emacs-lisp 
  (use-package simpleclip :config (simpleclip-mode 1))

  ;; Allows pasting in minibuffer with M-v
  (defun ksc/paste-in-minibuffer ()
    (local-set-key (kbd "M-v") 'simpleclip-paste))
  (add-hook 'minibuffer-setup-hook 'ksc/paste-in-minibuffer)
#+END_SRC
** Undo/Redo (undofu)
More obvious/easy to use undo and redo.
#+BEGIN_SRC emacs-lisp 
  (use-package undo-fu)
#+END_SRC
** Super-save
#+BEGIN_SRC emacs-lisp 
  ;; (use-package super-save
  ;;   :diminish super-save-mode
  ;;   :defer 2
  ;;   :config
  ;;   (setq super-save-auto-save-when-idle t
  ;; 		super-save-idle-duration 5 ;; after 5 seconds of not typing autosave
  ;; 		super-save-triggers ;; Functions after which buffers are saved (switching window, for example)
  ;; 		;'(evil-window-next evil-window-prev balance-windows other-window next-buffer previous-buffer)
  ;; 		super-save-max-buffer-size 10000000)
  ;;   (super-save-mode +1))

  ;; After super-save autosaves, wait __ seconds and then clear the buffer. I don't like
  ;; the save message just sitting in the echo area.
  (defun ksc-clear-echo-area-timer ()
	(run-at-time "2 sec" nil (lambda () (message " "))))
  (advice-add 'super-save-command :after 'ksc-clear-echo-area-timer)
#+END_SRC
** Saveplace
#+BEGIN_SRC emacs-lisp 
  (use-package saveplace
    :init (setq save-place-limit 100)
    :config (save-place-mode))
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp 
  (use-package yasnippet
    :diminish yas-minor-mode
    :defer 5
    :config
    ;; (setq yas-snippet-dirs (list (expand-file-name "snippets" jib/emacs-stuff)))
    (yas-global-mode 1)) ;; or M-x yas-reload-all if you've started YASnippet already.

  ;; Silences the warning when running a snippet with backticks (runs a command in the snippet)
  (require 'warnings)
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change)) 
#+END_SRC

* Visuals
** Fonts
*** Font configuration
#+BEGIN_SRC emacs-lisp 
  (setq text-scale-mode-step 1.2) ;; How much to adjust text scale by when using `text-scale-mode'
  (setq ksc-default-line-spacing 1) ;; This happens in the variables but I guess I have it here too.

  (setq-default line-spacing ksc-default-line-spacing)
  (setq ksc-text-height 140)

  ;; (set-frame-font "SF Mono:size=14" nil t)
  ;; (set-frame-font "Menlo:size=14" nil t)
  ;; (set-frame-font "Fira Code:size=14" nil t)
  (set-frame-font "JetBrainsMonoNL:size=14" nil t)

  (set-face-attribute 'default nil :family "JetBrainsMonoNL" :weight 'regular :height ksc-text-height)

  ;; Float height value (1.0) makes fixed-pitch take height 1.0 * height of default
  ;; This means it will scale along with default when the text is zoomed
  ;;  (set-face-attribute 'fixed-pitch nil :font "Roboto Mono" :weight 'regular :height 1.0)

  ;; Height of 160 seems to match perfectly with 12-point on Google Docs
  ;; (set-face-attribute 'variable-pitch nil :family "Times New Roman" :height 160)

  ;; (set-face-attribute 'variable-pitch nil :slant 'normal :weight 'normal :height 180 :width 'normal :foundry "nil" :family "Nunito Sans")

  ;; (set-face-attribute 'variable-pitch nil :slant 'normal :weight 'normal :height 180 :width 'normal :foundry "nil" :family "Nunito Sans")
#+END_SRC
*** mixed-pitch
A better version of variable-pitch mode. This keeps certain faces (defined in ~mixed-pitch-fixed-pitch-faces~) fixed-pitch.
#+BEGIN_SRC emacs-lisp
  (use-package mixed-pitch
    :defer t
    :config
    (setq mixed-pitch-set-height nil)
    (dolist (face '(org-date org-priority org-tag org-special-keyword)) ;; Some extra faces I like to be fixed-pitch
      (add-to-list 'mixed-pitch-fixed-pitch-faces face)))
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp 
  ;; Disables showing system load in modeline, useless anyway
  (setq display-time-default-load-average nil)

  (line-number-mode)
  (column-number-mode)
  (display-time-mode -1)
  (size-indication-mode 0)

  (use-package hide-mode-line
	:commands (hide-mode-line-mode))

  (use-package doom-modeline
	:config
	(doom-modeline-mode)
	(setq doom-modeline-buffer-file-name-style 'relative-from-project ;; Just show file name (no path)
		  doom-modeline-enable-word-count nil
		  doom-modeline-buffer-encoding nil
		  doom-modeline-icon t ;; Enable/disable all icons
		  doom-modeline-modal-icon nil ;; Icon for Evil mode
		  doom-modeline-major-mode-icon t
		  doom-modeline-major-mode-color-icon nil
		  doom-modeline-buffer-state-icon nil
		  doom-modeline-bar-width 3))
  
  (setq ksc-doom-modeline-text-height 140)
  (setq doom-modeline-height 28)
#+END_SRC
** Frame
*** Frame
Set a frame's initial size and a bit of border
#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist '((left . 150)
							  (width . 120)
							  (fullscreen . fullheight)
							  (internal-border-width . 3)))
#+END_SRC
*** Default Emacs frame features
Hides scroll, toolbar. Goes to the early-init.el.
#+BEGIN_SRC emacs-lisp :tangle ./early-init.el
  ;; Window configuration
  (setq frame-inhibit-implied-resize t) ;; Supposed to hasten startup

  ;; Less clutter (this is what dfrosted12 uses so I trust that)
  (add-to-list 'default-frame-alist '(tool-bar-lines . 0))
  (add-to-list 'default-frame-alist '(menu-bar-lines . 0))
  (add-to-list 'default-frame-alist '(vertical-scroll-bars))

  ;; This makes the Aqua titlebar color the same as Emacs.
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
#+END_SRC
** Themes & Icons
#+begin_src emacs-lisp
  (use-package all-the-icons)
  (load-theme 'modus-vivendi)
#+end_src

** Line numbers, fringe, hl-line
#+BEGIN_SRC emacs-lisp 
  (setq-default fringes-outside-margins nil)
  (setq-default indicate-buffer-boundaries nil) ;; Otherwise shows a corner icon on the edge
  (setq-default indicate-empty-lines nil) ;; Otherwise there are weird fringes on blank lines

  (set-face-attribute 'fringe nil :background nil)
  (set-face-attribute 'header-line nil :background nil :inherit 'default)

  (add-hook 'prog-mode-hook 'hl-line-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

* Org Mode
#+begin_src emacs-lisp

  (with-eval-after-load 'org
	(require 'org-tempo)

	(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
	(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
	(add-to-list 'org-structure-template-alist '("py" . "src python")))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
	 (python . t)
	 (shell . t)
	 (java . t)
	 ))

  ;; (use-package gnuplot :defer t)
  ;; Don't prompt before running code in org
  (setq org-confirm-babel-evaluate nil)
  (setq python-shell-completion-native-enable nil)

  ;; How to open buffer when calling `org-edit-special'.
  (setq org-src-window-setup 'current-window)

  ;; (org-babel-tangle)
  ;; (org-babel-tangle-file "~/.config/emacs/init.org")

  ;; Automatically tangle our init.org config file when we save it
  ;; (defun ksc/org-babel-tangle-config ()
  ;;   (when (string-equal (buffer-file-name)
  ;; 					  (expand-file-name "~/.config/init.org"))
  ;; 	;; Dynamic scoping to the rescue
  ;; 	(let ((org-confirm-babel-evaluate nil))
  ;; 	  (org-babel-tangle))))
  ;; (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'ksc/org-babel-tangle-config)))

#+end_src
